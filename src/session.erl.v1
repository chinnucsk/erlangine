-module(session).

-include("session.hrl").

-behaviour(gen_server).
-import(lists, [foreach/2]).
%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
         terminate/2, code_change/3]).

-export([start/1, stop/0, add/4, get/1, remove/1, list_sessions/0]).

-compile(export_all).

%
% interface
%

start(SessionList) -> gen_server:start_link({local, ?MODULE}, ?MODULE, SessionList, []).

stop() -> gen_server:call(?MODULE, stop).

% returns expired | nosession | session()
get(Sid) -> gen_server:call(?MODULE, {get, Sid}).

add(Sid, Uid, Realm, Opaque) -> gen_server:call(?MODULE, {add, Sid, Uid, Realm, Opaque}).

remove(Sid) -> gen_server:call(?MODULE, {remove, Sid}).

expire() -> gen_server:call(?MODULE, expire).

list_sessions() -> gen_server:call(?MODULE, list).

% calculate expire time in period from now
expire_time(Period) ->
    {SM, SS, Sm} = now(),
    SS1 = SS + Period,
    if SS1 > 1000000 -> {SM + 1, SS1 - 1000000, Sm};
        true -> {SM, SS1, Sm}
    end.

expired(Session) ->
    ExpPeriod = timer:now_diff(Session#session.expires, now()),
    ExpPeriod < 0.

%
% gen_server
%

init(SessionList) ->
    io:format("Module: ~p ok~n",[?MODULE]),
    {ok, SessionList}.

handle_call({get, Sid}, _From, SessionList) ->
    Reply = case lists:keysearch(Sid, 2, SessionList) of
        {value, Session} ->
            Expired = expired(Session),
            if Expired -> expired;
	       true -> Session
	    end;
	_ -> nosession
    end,
    {reply, Reply, SessionList};

handle_call({add, Sid, Uid, Realm, Opaque}, _From, SessionList) ->
    case lists:keymember(Sid, 2, SessionList) of
        true  -> {reply, ok, SessionList};
        _ ->
	    {reply, ok, [#session{sid = Sid,
	                         uid = Uid,
				 realm = Realm,
				 expires = expire_time(30),
				 opaque = Opaque} | SessionList]}
    end;

handle_call({remove, Sid}, _From, SessionList) ->
    SessionList1 = lists:keydelete(Sid, 2, SessionList),
    {reply, ok, SessionList1};

handle_call(list, _From, SessionList) ->
    {reply, SessionList, SessionList};

handle_call(expire, _From, SessionList) ->
    SessionList1 = lists:filter(fun(Session) ->
                                    not expired(Session)
				end,
				SessionList),
    {reply, ok, SessionList1};

handle_call(Other, _From, State) ->
    io:format("Unknown ~p request: ~p~n", [?MODULE, Other]),
    {reply, unknown, State}.

handle_cast(_Msg, State) -> {noreply, State}.
handle_info(_Info, State) -> {noreply, State}.
terminate(_Reason, _State) -> ok.
code_change(_OldVsn, State, _Extra) -> {ok, State}.
